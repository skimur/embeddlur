
@using Embedlur
@using Embedlur.Providers
@model Embedlur.IEmbeddedResult
@{
    var richResult = Model as IRichEmbeddedResult;
    var photoResult = Model as IPhotoEmbeddedResult;

    if (richResult == null && photoResult == null) { throw new Exception("Invalid type"); }

    var galleryItems = Model.AdditionalData.ContainsKey("Items") ? (List<ImgurProvider.ImgurGalleryItem>)Model.AdditionalData["Items"] : null;
}
@section head
{
    <style type="text/css">
        html, body {
            padding: 0;
            margin: 0;
            background: black;
        }

        html {
            height: 100%;
        }

        body {
            overflow: hidden;
            height: 100%;
        }

        .video-wrap {
            padding-top: 44px;
            padding-bottom: 44px;
            width: 100%;
            height: 100%;
            position: relative;
        }
        .video-wrap video {
            width: 100%;
            height: 100%;
        }

        @if (galleryItems != null)
        {

        }
        else if (richResult != null)
        {
            <text>
            .outer {
                display: table;
                position: absolute;
                height: 100%;
                width: 100%;
            }

            .middle {
                display: table-cell;
                vertical-align: middle;
            }

            .inner {
                margin-left: auto;
                margin-right: auto;
                width: 400px; /*this is the value that imgur gives its iframe*/
            }
            </text>
        }
        else if (photoResult != null)
        {
            <text>
            img
            {
                max-width: 100%;
                max-height: 100%;
                bottom: 0;
                left: 0;
                margin: auto;
                overflow: auto;
                position: fixed;
                right: 0;
                top: 0;
            }
            </text>
        }


    </style>

    @if (galleryItems != null)
    {
        @Scripts.Render("~/js/photoswipe")
        @Styles.Render("~/css/photoswipe")
    }
}
@if (galleryItems != null)
{
    <!-- Root element of PhotoSwipe. Must have class pswp. -->
    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

        <!-- Background of PhotoSwipe.
        It's a separate element as animating opacity is faster than rgba(). -->
        <div class="pswp__bg"></div>

        <!-- Slides wrapper with overflow:hidden. -->
        <div class="pswp__scroll-wrap">

            <!-- Container that holds slides.
            PhotoSwipe keeps only 3 of them in the DOM to save memory.
            Don't modify these 3 pswp__item elements, data is added later on. -->
            <div class="pswp__container">
                <div class="pswp__item"></div>
                <div class="pswp__item"></div>
                <div class="pswp__item"></div>
            </div>

            <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
            <div class="pswp__ui pswp__ui--hidden">

                <div class="pswp__top-bar">

                    <!-- Controls are self-explanatory. Order can be changed. -->

                    <div class="pswp__counter"></div>

                    <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                    <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                    <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
                    <!-- element will get class pswp__preloader--active when preloader is running -->
                    <div class="pswp__preloader">
                        <div class="pswp__preloader__icn">
                            <div class="pswp__preloader__cut">
                                <div class="pswp__preloader__donut"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                    <div class="pswp__share-tooltip"></div>
                </div>

                <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

                <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

                <div class="pswp__caption">
                    <div class="pswp__caption__center"></div>
                </div>

            </div>

        </div>

    </div>
    <script>
        var pswpElement = document.querySelectorAll('.pswp')[0];

        // build items array
        var items = [
            @foreach (var galleryItem in galleryItems)
            {
                @RenderJsonGalleryItem(galleryItem)
                if (galleryItems.IndexOf(galleryItem) != galleryItems.Count - 1)
                {
                    <text>,</text>
                }
            }
        ];

        var options = {
            index: 0
        };

        // Initializes and opens PhotoSwipe
        var gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
        gallery.init();
    </script>
}
else if (richResult != null)
{
    <div class="outer">
        <div class="middle">
            <div class="inner">
                @Html.Raw(richResult.Html)
            </div>
        </div>
    </div>
}
else
{
    <img src="@photoResult.Url" />
}

@helper RenderJsonGalleryItem(ImgurProvider.ImgurGalleryItem item)
{
    <text>
        {
        src: '@item.Url',
        w: @item.Width,
        h: @item.Height
        }
    </text>
}